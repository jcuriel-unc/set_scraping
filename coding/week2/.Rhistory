gabe_coms$personal_attack_agg <- rowSums(gabe_coms[,grepl("pa_", colnames(gabe_coms))])
gabe_coms$prejudice_agg <- rowSums(gabe_coms[,grepl("pb_", colnames(gabe_coms))])
### good; note that the rows of coding comments starts at 9
### We should be able to loop through all of these
###create a df to store this info in
irr_df <- as.data.frame(matrix(nrow=26,ncol=4))
colnames(irr_df) <- c("item","kappa_score","z_score","p_value")
### assign columns to items
irr_df$item <- colnames(koen_coms[9:ncol(koen_coms)])
### now store these into the data frame via a loop
for (i in 1:nrow(irr_df)) { ## starting off with first col of interest
temp_df <- cbind(gabe_coms[,i+8],koen_coms[,i+8])
irr_score <- kappa2(temp_df, weight = "equal") ## note: kappa 2 is for categorical or ordinal data
## store in df
irr_df$kappa_score[i] <- irr_score$value
irr_df$z_score[i] <- irr_score$statistic
irr_df$p_value[i] <- irr_score$p.value
}
### good. Let's take a look at the df
View(irr_df) ### these will all be NA if everything is 0; need variance
diff_mat <- koen_coms[,9:34] - gabe_coms[9:34]
View(diff_mat)
### Subset out the comments
diff_mat$row_number <- row_number(diff_mat)
View(diff_mat)
write.csv(diff_mat, "diff_mat06142023.csv", row.names = F)
?rnorm
?apply
library(tidyverse) ## for efficient cleaning of data frames
library(wru) ## for predicting race of profs
library(foreign) ## for reading in of csv files and such
library(rstudioapi) ## for efficient grabbing of working directory info
library(ggplot2) ## for cool plots
library(irr) #inter reliability package
library(rstudioapi) ### for directory things
######## First step: set the working directory
###setting directory
main_wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(main_wd)
### first thing to note: object based scripting
tt <- 5*8
tt
tt*9
r.r <- 5*7
r.r
vec_ex <- c(1,2,3,4,5,6,7,8)
vec_ex
class(vec_ex)
is.vector(vec_ex)
#### matrix
N = 100
M = 20
matrix( rnorm(N*M,mean=0,sd=1), N, M)  ### new command!!!
test_matrix <- matrix( rnorm(N*M,mean=0,sd=1), N, M)  ### new command!!!
## what is going on?
?rnorm
bad_matrix <- matrix( rnorm(133,mean=0,sd=1), N, M)
bad_matrix
colSums(is.na(bad_matrix))
class(test_matrix)
is.matrix(test_matrix)
test_data_frame <- as.data.frame(test_matrix)
class(test_data_frame)
dim(test_data_frame)
## check column names?
colnames(test_data_frame)
## or
colnames(test_data_frame)
name_seq <- paste0("col",sep="_",str_pad(seq(1,20,by=1), pad="0",side="left",width=3))
name_seq
## seq: creates a vector of numbers from start point, end point, and by (jump) set of numbers
## example
test_seq <- seq(1,20,by=1)
## seq: creates a vector of numbers from start point, end point, and by (jump) set of numbers
## example
test_seq <- seq(1,20,by=1)
test_seq_str <- as.character(test_seq) # converts to string
test_seq_str
test_seq_str
test_seq
### same order; what if we sort by whatever its coded as?
sort(test_seq)
sort(test_seq_str)
sort(str_pad(seq(1,20,by=1), pad="0",side="left",width=3))
#### change names now
colnames(test_data_frame) <- name_seq
names(test_data_frame)
## can now call columns as vectors
test_data_frame$col_002
## can also do
test_data_frame[,3]
## and also a specific value
test_data_frame[2,2]
### list objects? irritating, though store lots of things
list_variable = list(test_seq,test_matrix,test_data_frame)
list_variable
test_subset <- list_variable[[1]]
test_subset
test_subset1 <- list_variable[[1]]
test_subset1
test_subset2 <- list_variable[[2]]
test_subset2
class(test_subset2)
summary(test_data_frame)
y_var = rnrom(100, mean=0,sd=1)
cor(y_var,test_data_frame$col_001)
y_var = rnrom(100, mean=0,sd=1)
y_var = rnorm(100, mean=0,sd=1)
cor(y_var,test_data_frame$col_001)
###first: bind data (can only do if same length)
test_data_frame2 <- cbind(y_var, test_data_frame)
colnames(test_data_frame2)
ggplot(test_data_frame2, aes(y_var, col_001)) + geom_point()
ggplot(test_data_frame2, aes(col_001,y_var)) + geom_point()
?ggplot
?ggplot
ggplot(test_data_frame2, aes(col_001,y_var)) + geom_point()
test_model <- lm(y_var ~ col_001:col_020, data = test_data_frame2)
test_model
test_model <- lm(test_data_frame2$y_var ~ test_data_frame2[2:21], data = test_data_frame2)
test_model <- lm(test_data_frame2$y_var ~ test_data_frame2[2:21])
?lm
test_model <- lm(y_var ~., data = test_data_frame2)
###take a look at the regression
summary(test_model)
###table: use stargazer to export
library(stargazer)
stargazer(test_model)
### note that tables are silly
stargazer(
test_model,
type = "text",
keep.stat = c("n", "rsq", "adj.rsq"),
omit = c("Constant"),
title = "Modeling Spuriousness - OLS Regression",
out="test_model.html"
)
test_coef <- coef(test_model)
test_coef
class(test_coef)
### the variance covariance matrix!!!
test_vcov <- vcov(test_model)
class(test_vcov)
dim(test_vcov)
set.seed(77)
random_beta_draws <- mvrnorm(10000, test_coef, test_vcov)
library(MASS) ### for advancing a Masshole agenda
set.seed(77)
random_beta_draws <- mvrnorm(10000, test_coef, test_vcov)
random_beta_draws
test_model
summary(test_model)
?apply
mean_vals <- apply(test_data_frame, 2, mean())
mean_vals <- apply(test_data_frame, 2, mean)
mean_vals
###let's make a sequence of column 8 vals
summary(test_data_frame$col_008)
pred_seq <- seq(-3,3,by=0.1)
length(pred_seq)
### now let's make a data frame from that vector
pred_df <- sapply(mean_vals, function(x) x * 1:length(pred_seq)) |>
as.data.frame()
###let's take a look at this
View(pred_df)
class(pred_df)
## recall, col 8 only has its mean vals; let's replace with the sequence
pred_df$col_008 <- pred_seq
# matrix multiplication. Additionall,y the t() transposes the matrix, meaning that the columns become rows, and
# rows columns. This is b/c the
t(random_beta_draws)
xb_mil_wd
xb_mil_wd <- as.matrix(pred_mil_df) %*% t(random_beta_draws) ## note: the "%*%" is used as the multiplier for
pred_probs <- as.matrix(pred_df) %*% t(random_beta_draws)
class(random_beta_draws)
dim(random_beta_draws)
class(pred_df)
dim(pred_df)
## note: we need an intercept
pred_df <- cbind(1,pred_df)
pred_probs <- as.matrix(pred_df) %*% t(random_beta_draws)
head(pred_probs)
View(pred_probs)
pred_prob_df <-apply(pred_probs, 1,quantile, probs=c(0.025,.5,.975) )
dim(pred_prob_df)
View(pred_prob_df)
summary(test_model)
dim(pred_prob_df)
### so we now have a data frame with the range effect of col 8 varying on y. Let's get this plotted out
pred_prob_df <- t(pred_prob_df)
colnames(pred_prob_df) <- c("low_ci","median_est","upp_ci")
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=test_seq, y=median_est, col="blue")) +
geom_line(size=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci, col="blue"), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
scale_color_manual(values= c("blue","blue")) +
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
class(pred_prob_df)
pred_prob_df <- as.data.frame(pred_prob_df)
colnames(pred_prob_df) <- c("low_ci","median_est","upp_ci")
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=test_seq, y=median_est, col="blue")) +
geom_line(size=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci, col="blue"), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
scale_color_manual(values= c("blue","blue")) +
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=test_seq, y=median_est, col="blue")) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci, col="blue"), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
scale_color_manual(values= c("blue","blue")) +
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=test_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
scale_color_manual(values= c("blue","blue")) +
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=test_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=test_seq, y=median_est)) +
geom_line(linewidth=1.2)
test_ggplot_reg
pred_prob_df <- cbind(pred_prob_df, test_seq)
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=test_seq, y=median_est)) +
geom_line(linewidth=1.2)
test_ggplot_reg
head(pred_prob_df)
length(test_seq)
test_seq
pred_prob_df <- cbind(pred_prob_df, pred_seq)
head(pred_seq)
head(pred_prob_df)
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2)
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
test_ggplot_reg
summary(pred_prob_df$median_est)
View(pred_prob_df)
pred_seq <- seq(-3,3,by=0.1)
length(pred_seq) ## 61 length...
### now let's make a data frame from that vector
pred_df <- sapply(mean_vals, function(x) x * 1:length(pred_seq)) |>
as.data.frame()
###let's take a look at this
View(pred_df) ## cool!
## recall, col 8 only has its mean vals; let's replace with the sequence
pred_df$col_008 <- pred_seq ## must be same length
## note: we need an intercept
pred_df <- cbind(1,pred_df)
View(pred_df)
pred_df[,8]
mean_vals
### now let's make a data frame from that vector
pred_df <- sapply(mean_vals, function(x)  1:length(pred_seq)) |>
as.data.frame()
###let's take a look at this
View(pred_df) ## cool!
### now let's make a data frame from that vector
pred_df <- as.data.frame(replicate(length(pred_seq), mean_vals))
###let's take a look at this
View(pred_df) ## cool!
### now let's make a data frame from that vector
pred_df <- as.data.frame(replicate(mean_vals,length(pred_seq)))
### now let's make a data frame from that vector
pred_df <- as.data.frame(replicate(length(pred_seq), mean_vals))
###let's take a look at this
View(pred_df) ## cool!
pred_df <- t(pred_df)
## recall, col 8 only has its mean vals; let's replace with the sequence
pred_df$col_008 <- pred_seq ## must be same length
### now let's make a data frame from that vector
pred_df <- as.data.frame(replicate(length(pred_seq), mean_vals))
pred_df <- t(pred_df) #transpose, making rows into cols, vice versa
class(pred_df)
pred_df <- as.data.frame(pred_df)
names(pred_df)
## recall, col 8 only has its mean vals; let's replace with the sequence
pred_df$col_008 <- pred_seq ## must be same length
## note: we need an intercept
pred_df <- cbind(1,pred_df)
head(random_beta_draws)
### now its time for matrix multiplication
head(random_beta_draws)
pred_probs <- as.matrix(pred_df) %*% t(random_beta_draws)
pred_prob_df <-apply(pred_probs, 1,quantile, probs=c(0.025,.5,.975) )
### so we now have a data frame with the range effect of col 8 varying on y. Let's get this plotted out
pred_prob_df <- t(pred_prob_df)
pred_prob_df <- as.data.frame(pred_prob_df)
colnames(pred_prob_df) <- c("low_ci","median_est","upp_ci")
pred_prob_df <- cbind(pred_prob_df, pred_seq)
head(pred_prob_df)
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
test_ggplot_reg
### now let's save this thing
ggsave("example_plot.png" ,test_ggplot_reg, scale=1,width=9,height=6,units = c("in"), dpi=400)
### now let's save this thing
ggsave("example_plot.png" ,test_ggplot_reg, scale=1,width=9,height=6,units = c("in"), dpi=400,bg="white")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=..scaled..))
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)))
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008 - 1,y=after_stat(scaled)))
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)))
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)-1))
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)-1), col="blue",alpha=0.2)
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)-1), fill="blue",alpha=0.2)
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)-1), col="blue",linewidth=1.2)
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)-1, col="blue"),linewidth=1.2)
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)-1, col="blue"),linewidth=1.2) +
scale_color_manual("range of hedgehog interest sampled", values=c("Range"="blue"))
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)-1, col="blue"),linewidth=1.2) +
scale_color_manual("range of hedgehog interest sampled", values=c("Estimate"="red","Range"="blue"))
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)-1), col="blue",linewidth=1.2) +
scale_color_manual("range of hedgehog interest sampled", values=c("Estimate"="red","Range"="blue"))
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)-1.5), col="blue",linewidth=1.2)
test_ggplot_reg
cooks.distance(test_model)
test_cook<-cooks.distance(test_model) ## works on model object
test_cook
test_cook[which.max(cooks.distance(test_cook))]
test_cook[which.max(test_cook)]
plot(cooks.distance(test_model),type="b",pch=18,col="red")
dim(test_data_frame)
## identify cutpoint by knowing number of obs in reg (100 for us), the number of vars (20), relative to 4
N = nrow(test_data_frame)
k = ncol(test_data_frame)
cutoff = 4/ (N-k-1)
plot(cooks.distance(test_model),type="b",pch=18,col="red")
abline(h=cutoff,lty=2)
## pulls row numbers
test_cook[which(test_cook>cutoff)]
## pulls row numbers
outliers <-test_cook[which(test_cook>cutoff)]
outliers
col_number(outliers)
class(outliers)
outliers <-as.data.frame(outliers)
names(outliers)
## pulls row numbers
outliers <-test_cook[which(test_cook>cutoff)]
outliers <-as.data.frame(outliers)
class(outliers)
names(outliers)
outliers
### make row number a column
outliers$row_num <- row_number(outliers)
head(outliers)
### let's merge back on that original data
test_data_frame2$row_num <- row_number(outliers)
### let's merge back on that original data
test_data_frame2$row_num <- row_number(test_data_frame2)
head(test_data_frame2)
### let's merge back on that original data
test_data_frame2$row_num <- row_number(test_data_frame2)
head(test_data_frame2)
View(test_data_frame2)
### let's merge back on that original data
test_data_frame2$row_num2 <- row_number(test_data_frame2)
head(test_data_frame2)
### let's merge back on that original data
test_data_frame2$row_num2 <- rownames(test_data_frame2)
head(test_data_frame2)
test_data_frame2 <- subset(test_data_frame2, select=-c(row_num))
head(outliers)
### make row number a column
outliers$row_num <- rownames(outliers)
head(outliers)
### let's merge back on that original data
test_data_frame2$row_num <- rownames(test_data_frame2)
test_data_frame2 <- merge(test_data_frame2, outliers, by="row_num",all.x=T)
###let's check for missing
sum(is.na(test_data_frame2$outliers))
### add in var for outlier dummy
test_data_frame2$outlier_dummy <- 0
test_data_frame2$outlier_dummy[is.na(test_data_frame2$outliers)==F] <- 1
names(test_data_frame2)
test_model_cd <- lm(y_var ~., data = test_data_frame2[,-c("row_num","row_num2","outliers")])
names(test_data_frame2)
###
test_model <- lm(y_var ~., data = subset(test_data_frame2, select=-c(row_num,row_num2,outliers)))
summary(test_model)
