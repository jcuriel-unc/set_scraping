test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)-1, col="blue"),linewidth=1.2) +
scale_color_manual("range of hedgehog interest sampled", values=c("Range"="blue"))
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)-1, col="blue"),linewidth=1.2) +
scale_color_manual("range of hedgehog interest sampled", values=c("Estimate"="red","Range"="blue"))
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)-1), col="blue",linewidth=1.2) +
scale_color_manual("range of hedgehog interest sampled", values=c("Estimate"="red","Range"="blue"))
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_008,y=after_stat(scaled)-1.5), col="blue",linewidth=1.2)
test_ggplot_reg
cooks.distance(test_model)
test_cook<-cooks.distance(test_model) ## works on model object
test_cook
test_cook[which.max(cooks.distance(test_cook))]
test_cook[which.max(test_cook)]
plot(cooks.distance(test_model),type="b",pch=18,col="red")
dim(test_data_frame)
## identify cutpoint by knowing number of obs in reg (100 for us), the number of vars (20), relative to 4
N = nrow(test_data_frame)
k = ncol(test_data_frame)
cutoff = 4/ (N-k-1)
plot(cooks.distance(test_model),type="b",pch=18,col="red")
abline(h=cutoff,lty=2)
## pulls row numbers
test_cook[which(test_cook>cutoff)]
## pulls row numbers
outliers <-test_cook[which(test_cook>cutoff)]
outliers
col_number(outliers)
class(outliers)
outliers <-as.data.frame(outliers)
names(outliers)
## pulls row numbers
outliers <-test_cook[which(test_cook>cutoff)]
outliers <-as.data.frame(outliers)
class(outliers)
names(outliers)
outliers
### make row number a column
outliers$row_num <- row_number(outliers)
head(outliers)
### let's merge back on that original data
test_data_frame2$row_num <- row_number(outliers)
### let's merge back on that original data
test_data_frame2$row_num <- row_number(test_data_frame2)
head(test_data_frame2)
### let's merge back on that original data
test_data_frame2$row_num <- row_number(test_data_frame2)
head(test_data_frame2)
View(test_data_frame2)
### let's merge back on that original data
test_data_frame2$row_num2 <- row_number(test_data_frame2)
head(test_data_frame2)
### let's merge back on that original data
test_data_frame2$row_num2 <- rownames(test_data_frame2)
head(test_data_frame2)
test_data_frame2 <- subset(test_data_frame2, select=-c(row_num))
head(outliers)
### make row number a column
outliers$row_num <- rownames(outliers)
head(outliers)
### let's merge back on that original data
test_data_frame2$row_num <- rownames(test_data_frame2)
test_data_frame2 <- merge(test_data_frame2, outliers, by="row_num",all.x=T)
###let's check for missing
sum(is.na(test_data_frame2$outliers))
### add in var for outlier dummy
test_data_frame2$outlier_dummy <- 0
test_data_frame2$outlier_dummy[is.na(test_data_frame2$outliers)==F] <- 1
names(test_data_frame2)
test_model_cd <- lm(y_var ~., data = test_data_frame2[,-c("row_num","row_num2","outliers")])
names(test_data_frame2)
###
test_model <- lm(y_var ~., data = subset(test_data_frame2, select=-c(row_num,row_num2,outliers)))
summary(test_model)
local_files
library(tidyverse) ## for efficient cleaning of data frames
library(wru) ## for predicting race of profs
library(foreign) ## for reading in of csv files and such
library(rstudioapi) ## for efficient grabbing of working directory info
library(ggplot2) ## for cool plots
library(irr)
###setting directory
main_wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(main_wd)
### Read in the csv data
local_files <-list.files(full.names=T)
local_files <- local_files[grepl(".csv",local_files)] ## subset to only include csv files
local_files
##
gabe_coms <- read.csv(local_files[3])
koen_coms <- read.csv(local_files[6])
### now subset to include only first 15
gabe_coms <- gabe_coms[1:500,]
koen_coms <- koen_coms[1:500,]
dim(gabe_coms) ## 31 cols
### lets create an aggregate index of the dims of interest
koen_coms$outrage_agg <- rowSums(koen_coms[,grepl("out_", colnames(koen_coms))])
koen_coms$personal_attack_agg <- rowSums(koen_coms[,grepl("pa_", colnames(koen_coms))])
koen_coms$prejudice_agg <- rowSums(koen_coms[,grepl("pb_", colnames(koen_coms))])
### now same for Gabe
gabe_coms$outrage_agg <- rowSums(gabe_coms[,grepl("out_", colnames(gabe_coms))])
gabe_coms$personal_attack_agg <- rowSums(gabe_coms[,grepl("pa_", colnames(gabe_coms))])
gabe_coms$prejudice_agg <- rowSums(gabe_coms[,grepl("pb_", colnames(gabe_coms))])
###create a df to store this info in
irr_df <- as.data.frame(matrix(nrow=26,ncol=4))
colnames(irr_df) <- c("item","kappa_score","z_score","p_value")
### assign columns to items
irr_df$item <- colnames(koen_coms[9:ncol(koen_coms)])
for (i in 1:nrow(irr_df)) { ## starting off with first col of interest
temp_df <- cbind(gabe_coms[,i+8],koen_coms[,i+8])
irr_score <- kappa2(temp_df, weight = "equal") ## note: kappa 2 is for categorical or ordinal data
## store in df
irr_df$kappa_score[i] <- irr_score$value
irr_df$z_score[i] <- irr_score$statistic
irr_df$p_value[i] <- irr_score$p.value
}
### good. Let's take a look at the df
View(irr_df) ### these will all be NA if everything is 0; need variance
5+%
5+5
################################################################################
################# Introduction to R and Regression base file ##################
################################################################################
################# 06/14/2023 ###################################################
5+5
################################################################################
################# Introduction to R and Regression base file ##################
################################################################################
################# 06/14/2023 ###################################################
5+5
################################################################################
################# Introduction to R and Regression base file ##################
################################################################################
################# 06/14/2023 ###################################################
5+5
##nah, actually for simulating and creating pred probs
######## First step: set the working directory
###setting directory
main_wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
main_wd
setwd("C:/Users/j-curiel/")
list.files()
setwd(main_wd)
tt <- 5*8
tt
tt*9
tt <- 5*8
tt
tt*9
r.r <- 5*7
r.r # this would weird out python
r+r
r+r <- 0
r.r <- 5*7
r.r <- 5*7
r.r <- 5*7
rr <- {
}
rr <- {
vec_ex <- c(1,2,3,4,5,6,7,8)
vec_ex
class(vec_ex) ## vectors will just state the type of data; can check with is.vector() for boolean statement
is.vector(vec_ex) ## TRUE
#### matrix
N = 100
M = 20
set.seed(1337) ## making replicable
set.seed(-1337) ## making replicable
set.seed(1337) ## making replicable
?matrix
?rnorm
?rpois
?dirichlet
?rdirichlet
?matrix
test_matrix <- matrix( rnorm(N*M,mean=0,sd=1), N, M)  ### new command!!!
class(test_matrix)
is.matrix(test_matrix)
View(test_matrix)
bad_matrix <- matrix( rnorm(133,mean=0,sd=1), N, M) ## got warning; let's check
colSums(is.na(bad_matrix)) ### nothing missing... so what happened?
View(bad_matrix)
test_data_frame <- as.data.frame(test_matrix)
class(test_data_frame)
dim(test_data_frame) ## rows then columns
test_matrix$V1
test_matrix[,1]
test_matrix[1,]
test_matrix[1,1]
## check column names?
colnames(test_data_frame)
## or
names(test_data_frame)
sort(colnames(test_data_frame))
?paste0
name_seq <- paste0("col",sep="_",str_pad(seq(1,20,by=1), pad="0",side="left",width=3))
name_seq
?str_pad
library(stringr) #processing strings; yes, apparently diff
str_pad(seq(1,20,by=1), pad="0",side="left",width=3)
seq(1,20,by=1)
name_seq <- paste0("col",sep="_",str_pad(seq(1,20,by=1), pad="0",side="left",width=3))
name_seq
## seq: creates a vector of numbers from start point, end point, and by (jump) set of numbers
## example
test_seq <- seq(1,20,by=1)
test_seq_str <- as.character(test_seq) # converts to string
test_seq_str
test_seq
### same order; what if we sort by whatever its coded as?
sort(test_seq)
sort(test_seq_str) ## different order; if string padded?
test_seq_str
test_seq
### same order; what if we sort by whatever its coded as?
sort(test_seq)
sort(test_seq_str) ## different order; if string padded?
sort(str_pad(seq(1,20,by=1), pad="0",side="left",width=3)) #different, but same order
name_seq
colnames(test_data_frame)
#### change names now
colnames(test_data_frame) <- name_seq
names(test_data_frame) ## are different now! same length is important though
colnames(test_data_frame)[5]
colnames(test_data_frame)[5] <- "hedgehog"
colnames(test_data_frame)
#### change names now
colnames(test_data_frame) <- name_seq
names(test_data_frame) ## are different now! same length is important though
## can now call columns as vectors
test_data_frame$col_002
tt <- test_data_frame$col_002
tt
is.vector(tt)
tt <- test_data_frame[,1]
is.vector(tt)
tt
## can also do
test_data_frame[,2]
## and also a specific value
test_data_frame[2,2]
### list objects? irritating, though store lots of things
list_variable = list(test_seq,test_matrix,test_data_frame)
list_variable ## sloppy way to call everything
test_subset1 <- list_variable[[1]]
test_subset1
## we can pull from it, though
list_variable[1]
test_subset2 <- list_variable[[2]]
class(test_subset2)
summary(test_data_frame) #figure out the range of values for all the cols
summary(test_data_frame$col_001) #figure out the range of values for all the cols
summary(test_data_frame) #figure out the range of values for all the cols
set.seed(2581) ## Gabe's last four ssn digits
y_var = rnorm(100, mean=0,sd=1)
y_var
cor(y_var,test_data_frame$col_001) # 0.05846667
###first: bind data (can only do if same length)
test_data_frame2 <- cbind(y_var, test_data_frame)
View(test_data_frame2)
colnames(test_data_frame2)### good, it worked
ggplot(test_data_frame2, aes(col_001,y_var)) + geom_point()
## what if we wanted to create a linear regression? The lm cmd!!!
test_model0 <- lm(y_var ~ col_003 + col_004, data = test_data_frame2)
test_model0
test_model <- lm(y_var ~., data = test_data_frame2)
test_model
###take a look at the regression
summary(test_model)
###table: use stargazer to export
library(stargazer)
stargazer(test_model)
### note that tables are silly
stargazer(
test_model,
type = "text",
keep.stat = c("n", "rsq", "adj.rsq"),
omit = c("Constant"),
title = "Modeling Spuriousness - OLS Regression",
out="test_model.html"
)
?stargazer
?predict.lm
test_coef <- coef(test_model)
class(test_coef) # vector, or one row matrix
test_coef
### the variance covariance matrix!!!
test_vcov <- vcov(test_model)
class(test_vcov)
dim(test_vcov) ## very important that it is a square
View(test_vcov)
random_beta_draws <- mvrnorm(10000, test_coef, test_vcov)
### now, let's do some simulations!!!!
library(MASS)
set.seed(77)
random_beta_draws <- mvrnorm(10000, test_coef, test_vcov)
dim(random_beta_draws)
View(random_beta_draws)
summary(random_beta_draws)
mean_vals <- apply(test_data_frame, 2, mean) ## what the Hell is this withcraft!?
mean_vals
###let's make a sequence of column 8 vals
summary(test_data_frame$col_019) ## let's just do -3 to 3
pred_seq <- seq(-3,3,by=0.1)
length(pred_seq) ## 61 length...
### now let's make a data frame from that vector
pred_df <- as.data.frame(replicate(length(pred_seq), mean_vals))
pred_df
###let's take a look at this
View(pred_df) ## cool!
### now let's make a data frame from that vector
pred_df <- as.data.frame(replicate(length(pred_seq), mean_vals))
pred_df <- t(pred_df) #transpose, making rows into cols, vice versa
pred_df <- as.data.frame(pred_df)
## recall, col 8 only has its mean vals; let's replace with the sequence
pred_df$col_019 <- pred_seq ## must be same length
## note: we need an intercept
pred_df <- cbind(1,pred_df)
### now its time for matrix multiplication
head(random_beta_draws)
pred_probs <- as.matrix(pred_df) %*% t(random_beta_draws)
pred_prob_df <-apply(pred_probs, 1,quantile, probs=c(0.025,.5,.975) )
dim(pred_prob_df)
View(pred_prob_df)
### so we now have a data frame with the range effect of col 8 varying on y. Let's get this plotted out
pred_prob_df <- t(pred_prob_df)
pred_prob_df <- as.data.frame(pred_prob_df)
colnames(pred_prob_df) <- c("low_ci","median_est","upp_ci")
pred_prob_df <- cbind(pred_prob_df, pred_seq)
head(pred_prob_df)
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
test_ggplot_reg
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_019,y=after_stat(scaled)-1.5), col="blue",linewidth=1.2)
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
test_ggplot_reg
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_019,y=after_stat(scaled)), col="blue",linewidth=1.2)
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
test_ggplot_reg
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_019,y=after_stat(scaled)-3), col="blue",linewidth=1.2)
test_ggplot_reg
### now let's save this thing
ggsave("example_plot.png" ,test_ggplot_reg, scale=1,width=9,height=6,units = c("in"), dpi=400,bg="white")
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
test_ggplot_reg
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_019,y=after_stat(scaled)-3), col="blue",linewidth=1.2)
test_ggplot_reg
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_019,y=after_stat(scaled)-3), col="blue",linewidth=1.2)
test_ggplot_reg
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_019,y=after_stat(scaled)-2), col="blue",linewidth=1.2)
test_ggplot_reg
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_019,y=after_stat(scaled)-1), col="blue",linewidth=1.2)
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
test_ggplot_reg
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_019+4,y=after_stat(scaled)-1), col="blue",linewidth=1.2)
test_ggplot_reg
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Hedgehog Alliance of Ohio")
test_ggplot_reg
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_019,y=after_stat(scaled)-1), col="blue",linewidth=1.2)
test_ggplot_reg <- ggplot(pred_prob_df, aes(x=pred_seq, y=median_est)) +
geom_line(linewidth=1.2) +
geom_ribbon(aes(ymin=low_ci,ymax=upp_ci), alpha=0.4) + #### very important command; makes the CIs
theme_minimal() + ## cleans up the presentation of the plot
labs(title="An example of a regression plot", x="Number of hedgehogs owned", y="Interest in badgers",
caption="This plot is brought to you by the Avengers")
test_ggplot_reg
###note: do we have range of x vals? no. That's not good, since it belies realistic potential of data
test_ggplot_reg <- test_ggplot_reg +
geom_density(data=test_data_frame2,aes(x=col_019,y=after_stat(scaled)-1), col="blue",linewidth=1.2)
test_ggplot_reg
test_cook<-cooks.distance(test_model) ## works on model object
test_cook ## very long; let's just look at max vals
## identify cutpoint by knowing number of obs in reg (100 for us), the number of vars (20), relative to 4
N = nrow(test_data_frame)
k = ncol(test_data_frame)
cutoff = 4/ (N-k-1)
cutoff
test_cook
cutoff
plot(cooks.distance(test_model),type="b",pch=18,col="red")
abline(h=cutoff,lty=2) ## what does this mean? Everything above line is an outlying obs; should control for
cutoff
test_cook
which(test_cook>cutoff)
## pulls row numbers
outliers <-test_cook[which(test_cook>cutoff)]
outliers
outliers <-as.data.frame(outliers)
outliers
### make row number a column
outliers$row_num <- rownames(outliers)
### make row number a column
outliers$row_num <- rownames(outliers)
head(outliers)
### let's merge back on that original data
test_data_frame2$row_num <- rownames(test_data_frame2)
head(test_data_frame2)
test_data_frame2 <- merge(test_data_frame2, outliers, by="row_num",all.x=T)
View(test_data_frame2)
###let's check for missing
sum(is.na(test_data_frame2$outliers)) ## missing 93; good
### add in var for outlier dummy
test_data_frame2$outlier_dummy <- 0
test_data_frame2$outlier_dummy[is.na(test_data_frame2$outliers)==F] <- 1
names
names(test_data_frame2)
###
test_model_cd <- lm(y_var ~., data = subset(test_data_frame2, select=-c(row_num,outliers)))
summary(test_model_cd)
pred_seq
length(pred_seq)
pred_seq
?replicate
mean_vals
### now let's make a data frame from that vector
pred_df <- as.data.frame(replicate(length(pred_seq), mean_vals))
pred_df
### now, let's do some simulations!!!!
library(MASS)
### now, let's do some simulations!!!!
library(MASS)
### now, let's do some simulations!!!!
library(MASS)
### now, let's do some simulations!!!!
library(MASS)
### now, let's do some simulations!!!!
library(MASS)
1700/8
